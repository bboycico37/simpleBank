//  SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;


contract simpleBank {
    mapping (address => uint) private balance;

    address public owner;

    event LogDipositMade(address accountAddress, uint amount);

    constructor() {
        owner = msg.sender;
    }

    function deposit() public payable returns (uint) {

        require((balance[msg.sender] + msg.value) >= balance[msg.sender]);

        balance[msg.sender] += msg.value;
        emit LogDipositMade(msg.sender, msg.value); // fire event
        return balance[msg.sender];
    }

    function withdraw(uint withdrawAmount) public payable returns (uint remaninigBal) {
        require(withdrawAmount <= balance[msg.sender], "Insufficient funds");

        balance[msg.sender] -= withdrawAmount;
        payable (msg.sender).transfer(withdrawAmount);
        return balance[msg.sender];
    }

   
}
